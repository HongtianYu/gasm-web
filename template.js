/**
 * Adds the navigations, etc.
 * 
 * Using Javascript to generate contents 
 * is way more flexible than hard-coding
 * things into the html file. Too bad I
 * coudn't use html processors like PHP 
 * and stuff, or JS libraries like Bootstrap.
 * 
 * Now I have to write my own library, so
 * that all of my pages are consistant. Yikes.
 *
 * (Requires template string support [ES2015(ES6)])
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals}
 * 
 * Some browsers (like the good ol' IE) doesn't support this.
 * 
 * [Predefined Variable (optional): @type {?String} templateURLBase]
 * 
 * @param {HTMLUListElement} header 
 * @param {HTMLElement} footer 
 * @param {?boolean} useShortcodes
 */
function templateAction(header, footer, useShortcodes) {

    var hasBaseURL = false;
    if (typeof (templateBaseURL) !== "undefined") { hasBaseURL = true; }
    var baseURL = ((hasBaseURL) ? (templateBaseURL + '/') : "");

    function generateNavBarHTML() {
        /** The links in the navigation menu/bar */
        var links = [
            ["About", "about.html"],
            ["Learn", /*"#"*/ "learn.html"],
            ["Playground", "playground.html"],
            ["Documentations", "docs/main.html"],
            // ["Current"] // only used in debug (deprecated)
            ["Console", "console.html"]
        ];

        /**
         * @example
         * <li class="nav-item"><a href="#" class="nav-link">Item 1</a></li>
         * <li class="nav-item"><a href="#" class="nav-link">Item 2</a></li>
         * <li class="nav-item"><div class="nav-link">Item 3</div></li>
         */
        var linksHTML = "";

        /* Getting the title of the page */
        let titleElements = document.getElementsByTagName('title');
        /** @type {string | null} */
        const currentTitle = (
            titleElements.length > 0 ?
                titleElements[titleElements.length - 1].innerText :
                null
        );

        // Reverse iteration... Need the links to be in LTR order.
        // This part relies heavily on template literals...
        for (var i = (links.length - 1); i >= 0; i--) {
            let cssClass = `nav-link${
                (currentTitle == links[i][0]) ? " nav-link-current" : ''
                }`;
            var innerLink = `<div class="${cssClass}">${links[i][0]}</div>`;
            if (links[i][1] && (currentTitle != links[i][0])) {
                innerLink = `<a href="${baseURL + links[i][1]}" class="${cssClass}">${links[i][0]}</a>`;
            }
            linksHTML += '<li class="nav-item">' + innerLink + '</li>';
        }

        return `
        <!-- The content is generated By JS to be more flexible. -->
        <li class="nav-icon">
            <a href="${baseURL}index.html" title="Home">
                <img class="gasm-icon-img" src="${baseURL}res/gasm-icon.png" />
            </a>
        </li>
        ${ linksHTML}
        `;
    }

    /**
     * The Easter Egg Registration Function
     * @private
     */
    function RegisterEE() {
        /**
         * The valid clicks count
         * @type {number}
         */
        var clickCount;
        /**
         * The timestamp of the last time 
         * this function ran. Used to calculate
         * the delta time.
         * @type {number}
         */
        var lastTimeStamp;
        if (!clickCount) { clickCount = 0; /* initialising to zero... */ }
        if (!lastTimeStamp) { lastTimeStamp = Date.now(); }
        var ef = function (e) {
            /** Time elapsed sice last click (ms) */
            var delta = Date.now() - lastTimeStamp;
            // [debug...]: console.log(delta + "_cln=" + clickCount + "+1");
            /** 
             * If the time since last click is less that 750ms, count += 1
             * Otherwise reset click count to avoid accidental clicking
             */
            if (delta < 750) { clickCount++; } else { clickCount = 0; }

            if (clickCount + 1 >= 10) { // clicked ten times continuously...
                alert("Hongtian Yu 2020\r\n* This is an easter egg * ");
                clickCount = 0; // reset count
            }

            // set the last timestamp
            lastTimeStamp = Date.now();
        }

        document
            .getElementById('author-info')
            /*  .addEventListener(`1
                    "click",
                    ef
                ); // this doesn't override others */
            .onclick = ef; // this overrides other event listeners!
    }

    function generateFooterHTML() {
        return `
            <div class="footer-left" id="author-info">
                <i>Hongtian Yu 2020</i>
                <hr />` +
            // <a href="bibliography.html"><b>Bibliography</b></a>
            // Bibliography should be linked only to Home page 
            `</div>
            <div class="footer-right">
                <a href="${baseURL}about-site.html">About the site itself</a>
            </div>
        `;
    }

    if (header) {
        header.innerHTML += generateNavBarHTML();
    }

    if (footer) {
        footer.innerHTML += generateFooterHTML();
        RegisterEE();
    }
};

/**
 * Translates my 'shortcodes' --
 * It replaces my 'markings' into 'real' HTML code...
 * @param {String} selector for querying elements
 */
function templateGenerateShortcodeHTML(selector) {
    /** 
     * my 'markings' or 'shortcodes'!
     * complex ones should always comes first;
     * some uses the 's' modifier to match multiple lines.
     * format/pattern:
     *  <RegExp match pattern> (key) : [<replace string>, <flag? or 'g'>, <post-proc fn?>]
     */
    const markings = {
        "```([^`]*[^\\s`]+[^`]*)```": ['<code class="block code">$1</code>', 'sg', function (s) {
            return s.replace(/([\r\n]+)\\s*(\\s)/g, '$1$2'); // unused...
        }],
        "`([^`]*?[^\\s`]+[^`]*?)`": ['<code class="inline code">$1</code>', 'sg']
    };

    // const markings = {
    //     "```": ['<code class="block code">', '</code>'],
    //     "`": ['<code class="inline code">', '</code>']
    // }; // old implementation...

    /* translating my shortcodes... */
    for (let text of document.querySelectorAll(selector)) {
        for (let marking in markings) {
            let replace = markings[marking];
            text.innerHTML = text.innerHTML.replace(
                // @deprecated
                // new RegExp(`${marking}(.*[^\s]+.*?)${marking}`, 'g'),
                // `${markings[marking][0]}$1${markings[marking][1]}`
                (function (e) { console.debug(e); return e; })
                    (new RegExp(marking, (replace[1] || 'g'))),
                replace[0]
            );
        }
    }
}

// default action
templateAction(document.getElementById('navbar'), document.getElementById('footer'));

